"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class custom_cmd_lcmt(object):
    __slots__ = ["levelFlag", "commVersion", "robotID", "SN", "bandWidth", "mode", "forwardSpeed", "sideSpeed", "rotateSpeed", "bodyHeight", "footRaiseHeight", "yaw", "pitch", "roll", "wirelessRemote", "AppRemote", "reserve", "crc"]

    __typenames__ = ["int8_t", "int16_t", "int16_t", "int32_t", "int8_t", "int8_t", "float", "float", "float", "float", "float", "float", "float", "float", "int8_t", "int8_t", "int32_t", "int32_t"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, [40], [40], None, None]

    def __init__(self):
        self.levelFlag = 0
        self.commVersion = 0
        self.robotID = 0
        self.SN = 0
        self.bandWidth = 0
        self.mode = 0
        self.forwardSpeed = 0.0
        self.sideSpeed = 0.0
        self.rotateSpeed = 0.0
        self.bodyHeight = 0.0
        self.footRaiseHeight = 0.0
        self.yaw = 0.0
        self.pitch = 0.0
        self.roll = 0.0
        self.wirelessRemote = [ 0 for dim0 in range(40) ]
        self.AppRemote = [ 0 for dim0 in range(40) ]
        self.reserve = 0
        self.crc = 0

    def encode(self):
        buf = BytesIO()
        buf.write(custom_cmd_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bhhibbffffffff", self.levelFlag, self.commVersion, self.robotID, self.SN, self.bandWidth, self.mode, self.forwardSpeed, self.sideSpeed, self.rotateSpeed, self.bodyHeight, self.footRaiseHeight, self.yaw, self.pitch, self.roll))
        buf.write(struct.pack('>40b', *self.wirelessRemote[:40]))
        buf.write(struct.pack('>40b', *self.AppRemote[:40]))
        buf.write(struct.pack(">ii", self.reserve, self.crc))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != custom_cmd_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return custom_cmd_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = custom_cmd_lcmt()
        self.levelFlag, self.commVersion, self.robotID, self.SN, self.bandWidth, self.mode, self.forwardSpeed, self.sideSpeed, self.rotateSpeed, self.bodyHeight, self.footRaiseHeight, self.yaw, self.pitch, self.roll = struct.unpack(">bhhibbffffffff", buf.read(43))
        self.wirelessRemote = struct.unpack('>40b', buf.read(40))
        self.AppRemote = struct.unpack('>40b', buf.read(40))
        self.reserve, self.crc = struct.unpack(">ii", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if custom_cmd_lcmt in parents: return 0
        tmphash = (0x1d4b997ea4ffcc22) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if custom_cmd_lcmt._packed_fingerprint is None:
            custom_cmd_lcmt._packed_fingerprint = struct.pack(">Q", custom_cmd_lcmt._get_hash_recursive([]))
        return custom_cmd_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", custom_cmd_lcmt._get_packed_fingerprint())[0]

